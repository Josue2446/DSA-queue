// FILE: queue1.template
// TEMPLATE CLASS IMPLEMENTED: queue<Item> (see queue1.h for documentation)
// This file is included in the header file, and not compiled separately.
// INVARIANT for the queue class:
//   1. The number of items in the queue is in the member variable count;
//   2. For a non-empty queue, the items are stored in a circular array
//      beginning at data[front] and continuing through data[rear].
//      The array's total capacity of the array is CAPACITY.
//   3. For an empty array, rear is some valid index, and front is
//      always equal to next_index(rear).
//      

#include <cassert>  // Provides assert
#include <iostream> // Provides cout

using std::cout;
using std::endl;

namespace main_savitch_8B
{
    template <class Item>
    const typename queue<Item>::size_type queue<Item>::CAPACITY;
    
    template <class Item>
    queue<Item>::queue( )
    {
        count = 0;
        first = 0;
        last = CAPACITY - 1;
        for(int i = 0; i < CAPACITY; i++)
            data[i] = Item();
    }

    template <class Item>
    Item queue<Item>::front( ) const
    // Library facilities used: cassert
    {
        if(!empty())
	        return data[first];
        else
            return Item();
    }

    template <class Item>
    void queue<Item>::pop( )
    // Library facilities used: cassert
    {
        if(!empty()){
            first = next_index(first);
            --count;    
        }
        return;
    }
    
    template <class Item>
    void queue<Item>::push(const Item& entry){
    // Library facilities used: cassert
            
        if(size() < CAPACITY){
            last = next_index(last);
            data[last] = entry;
            ++count;
        }
        return;
    }
    
    template <class Item>
    void queue<Item>::print() {
        cout << "Element: ";
        
        for(int i = 0; i < CAPACITY; i++)
            cout << i << " ";

        cout << endl << "Value:   ";

        if(count == 0){
            for(int i = 0; i < CAPACITY; i++)
                cout << "- ";
        }
        else if(first <= last){
            for(int i = 0; i < CAPACITY; i++){
                if((i >= first) && (i <= last))
                    cout << data[i] << " ";
                else
                    cout << "- ";
            }
        }
        else if(first > last){
            for(int i = 0; i < CAPACITY; i++){
                if((i <= last) || (i >= first))
                    cout << data[i] << " ";
                else
                    cout << "- ";
            }
        }

        cout << endl;
        return;
    }
}
